% Generierung von schwebenden Plattformen
% Es wird eine Menge von Plattformen generiert, so dass dem Spieler ein Weg vom angegeben Start- zum Zielpunkt ermÃ¶glicht wird.
% Sie koennen bei der Geniererung unterschiedliche Ausbreitungen, Laengen und Start/Endpositionen und Richtungen haben. 
% Es wird anschliessend ueberprueft, ob ein Weg vom Start zum Ziel vorhanden ist (ueber Nachbarschaftsbeziehungen). Dabei werden Toleranzbereiche (fÃ¼r Spruenge) genutzt.
% Aufgrund der langen Berechnungszeit wird diese Variante nicht genutzt. 
%
% TODO: abstand nach unten hin nicht so wichtig -> schwerkraft

#const width = 30.
#const height = 30.
#const number = (width+height)/10. 
%#const number = 3.
#const lMax = 5.  

%number((A+B)/10+1) :- betrag((startx-destx),A), betrag((starty-desty),B). 
#show number/1.

#const tolerance=2. % je X- und Y-Achse = 2x2

x(1..width).
y(1..height).
block(1..width,1..height).

#const startx = 1.
#const starty = 2.
#const destx = 19.
#const desty = 19.
start(2,10).
dest(19,10).



wert(-100..100). 
betrag(I,O) :- O=I, I>=0, wert(I;O) .
betrag(I,O) :- O=I*(-1), I<0, wert(I;O).

%dir(up;right).
%dir(up).
dir(up;right).

number(1..number).

lMax(lMax).
ausbreitung(4..6).

1{ platform(X,Y,L,A,Dir,ID) : x(X), y(Y), lMax(L), dir(Dir), ausbreitung(A) }1 :- number(ID). 


:- platform(X,Y,L,A,up,ID), not y(Y+A).


parea(XA,YA) :- platform(X,Y,L,A,up,ID), Y<=YA, YA<=Y+A, X<=XA, XA<=X+L-1, block(XA,YA).
parea(XA,YA) :- platform(X,Y,L,A,right,ID), X<=XA, XA<=X+A, Y<=YA, YA<=Y, block(XA,YA).

safe(X,Y) :- start(X,Y).
safe(X,Y) :- dest(X,Y).
safe(X,Y) :- parea(X,Y).
safe(XS,YS) :- parea(X,YS), X-tolerance<=XS, XS<=X+tolerance, x(XS).
safe(XS,YS) :- parea(XS,Y), Y-tolerance<=YS, YS<=Y+tolerance-1, y(YS). 

neighbour(A,B,C,D) :- neighbour(C,D,A,B).
neighbour(A,B,A+1,B) :- safe(A,B), safe(A+1,B).
neighbour(A,B,A-1,B) :- safe(A,B), safe(A-1,B).
neighbour(A,B,A,B+1) :- safe(A,B), safe(A,B+1).
neighbour(A,B,A,B-1) :- safe(A,B), safe(A,B-1).

reached(X,Y) :- dest(X,Y).
reached(X,Y) :- safe(X,Y), reached(A,B), neighbour(A,B,X,Y).

:- start(X,Y), not reached(X,Y).

% #show platform/6. #show parea/2. #show safe/2.
 #show platform/6.