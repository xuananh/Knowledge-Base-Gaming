#const width=40.
#const height=10.

#const jumpheight=2.
#const jumpwidth=2. 

#const platform1Count = 5.
#const platform2Count = 3.

#show platform1/3.
#show platform2/3.
#show fire/2.
#show cannon/2.
#show wall/2.
#show questionBox/2. 
#show coin/2.


#show goalX/2.
#show startX/2.
#show height/1.
#show width/1.
#show block/3.

#show start/1.
#show end/1.


start(1).
end(30).
startX(0,5).
goalX(30,5).


pFLength(platformLengthMin..platformLengthMax).
wallheight(wallheightMin .. wallheightMax) :- h(wallheightMin; wallheightMax). 
w(0..width).
h(1..height). 

width(width).
height(height).

block(0..width-1, 0..height-1). 


#const floorheight = 1.
floor(X,floorheight) :- w(X), not firepixel(X,_).

%%%%%%%%%%%%%%%%%
%%% PLATTFORM %%%
%%%%%%%%%%%%%%%%%


% Platformen / platform1 erste Ebene, platform2 eine darueber. 
#const platformLength = 7.
pflength(2..X) :- X=platformLength.
pf1height(jumpheight+floorheight..jumpheight+floorheight+1).
platform1Count{ platform1(X, Y, Length) : pflength(Length), pf1height(Y), block(X, Y) }platform1Count.
platform1Length(X,X2) :- platform1(X,Y,L), X2 = X+L. 
:-  platform1Length(A,B),  platform1Length(C,D), A<C, C-1<B.
%:-  platform1Length(A,B),  platform1Length(C,D), B!=D, A=C.
platform1pixel(A,Y) :- platform1(X,Y,L), X<=A, A<=X+L, w(A).

:- platform1pixel(X,Y), firepixel(X+1,Y).
:- platform1pixel(X,Y), firepixel(X-1,Y).
:- questionbox(X,Y1), firepixel(X-1,Y2), firepixel(X+1,Y2).

#const pf2count=4.
%pf2height(jumpheight*2+floorheight-3..jumpheight*2+floorheight).
%pf2count{ platform2(X, Y, Length) : pflength(Length), pf2height(Y), block(X, Y)}pf2count.
%platform2Length(X,X2) :- platform2(X,Y,L), X2 = X+L. 
%:-  platform2Length(A,B),  platform2Length(C,D), A<C, C-1<B.
%:-  platform2Length(A,B),  platform2Length(C,D), B<D, A=C.
%platform2pixel(A,Y) :- platform2(X,Y,L), X<=A, A<=X+L, w(A).


platformpixel(X,Y) :- platform1pixel(X,Y).
%platformpixel(X,Y) :- platform2pixel(X,Y).

%%%%%%%%%%%%
%%% FIRE %%%
%%%%%%%%%%%%

#const firecount=4.
#const firepixelcount=9.
firelength(1..jumpwidth).
firecount{ fire(X1,X2) : firelength(Length), w(X1), X2=X1+Length}firecount.
firepixel(X,floorheight) :- fire(X1,X2), X1<=X, X<=X2, w(X).

fireground(X,floorheight) :- w(X).
%fireground(X,Y) :- floor(X,Y).
%fireground(X,Y) :- platformpixel(X,Y).
:- firepixel(X,Y), platformpixel(X,Y+1).
:- firepixel(X,Y), coin(X,Y+1).
:- firepixel(X,Y), questionbox(X,Y+1).
:- firepixel(X,Y), not fireground(X,Y).
:- firepixel(X,Y), firepixel(X+1,Y), firepixel(X+2,Y), firepixel(X+3,Y).
:- firepixel(X,Y), firepixel(X+1,Y), firepixel(X+2,Y), firepixel(X+3,Y), firepixel(X+5,Y).
:- firepixel(X,Y), platform1pixel(X,Y1).


:- not firepixelcount{ firepixel(X,Y) }firepixelcount.


:- platformpixel(X,Y), platformpixel(X,Y+1).
%:- platform1pixel(X,Y), firepixel(X,_).

%:- platform1(X), hole(X).


% Standorte für Kanonen:
% auf Boden, auf Plattformen, auf Mauern 
%surfacePlatformFloorWall(X,Y) :- block(X,Y), platformpixel(X,Y-1), Y=jumpheight+floorheight.
%surfacePlatformFloorWall(X,Y) :- block(X,Y), wall(X,H,ID), Y=H+1, Y=jumpheight+floorheight.
%surfacePlatformFloorWall(X,Y) :- block(X,Y), floor(X,Y-1).


%%%%%%%%%%%%%%
%%% CANNON %%%
%%%%%%%%%%%%%%

% Kanonen: Abstand von mindestens 10 Blöcken, Keine Mauer direkt davor. 
#const cannoncount = 2.
{ cannon(X,Y) : floor(X,Y-1), block(X,Y)}cannoncount. 
{ cannon(X,Y) : platform1pixel(X,Y-1), block(X,Y) }cannoncount.
:- not cannoncount{cannon(X,Y)}cannoncount. 
:- cannon(X,Y), cannon(X1,Y1), X<X1, X+10>X1.
:- cannon(X,Y), wallpixel(XW,Y), XW<X, XW+10>X.
:- cannon(X,Y), cannon(X,Y+1). 
:- cannon(X,Y), not floor(X,Y-1).
:- cannon(X,Y), wallpixel(X,Y).
:- cannon(X,Y), platformpixel(X,Y+2).
:- cannon(X,Y), questionbox(X,Y+2).


%%%%%%%%%%%%
%%% WALL %%%
%%%%%%%%%%%%

% Mauern
wallheight(1+floorheight..jumpheight+floorheight).
#const wallcount=3.
wallid(1..wallcount).
1{ wall(X,Height,ID) : wallheight(Height), w(X) }1 :- wallid(ID).
wall(X) :- wall(X,Height,ID).
wallpixel(X,Y) :- wall(X,H,_), block(X,Y), floorheight<=Y, Y<=floorheight+H.
:- wall(X), platform1pixel(X,_).
:- wall(X1), wall(X2), X1<X2, X2+10<X1. % Abstand
:- wall(X1), wall(X2), X1>X2, X2+10>X1.
:- wall(X,Y,ID1), wall(X1,Y1,ID2),ID1!=ID2, X=X1.



%%%%%%%%%%%%%%%%%%%
%%% QUESTIONBOX %%%
%%%%%%%%%%%%%%%%%%%

% reachableitem(X,Y) :- platformpixel(X1,Y1), Y1-jumpwidth<=Y, Y<=Y1+jumpwidth,X<=Y+jumpheight, block(X,Y).
reachableitem(X,Y) :- Y=jumpheight+floorheight+1, block(X,Y).
reachableitem(X,Y) :- Y=jumpheight+floorheight, block(X,Y).

#const questionboxcount=7.
questionboxcount{ questionBox(X,Y) : reachableitem(X,Y)}questionboxcount.
:- questionBox(X1,Y1), questionBox(X2,Y2), Y1<Y2, X1=X2.
:- questionBox(X,Y1), firepixel(X,Y), Y1=Y+1.
:- questionBox(X,Y1), firepixel(X,Y), Y1=Y+2.
:- questionBox(X,Y1), firepixel(X,Y), Y1=Y+3.
:- questionBox(X,Y), platformpixel(X,Y+1).
:- questionBox(X,Y), platformpixel(X,Y-1).
:- questionBox(X,Y), wallpixel(X,Y-1).
:- questionBox(X,Y), fire(X+1,Y-1), fire(X-1,Y-1).



%%%%%%%%%%%%%
%%% COINS %%%
%%%%%%%%%%%%%

#const coinscount=50.
{ coin(X,Y) : reachableitem(X,Y)}coinscount.
:- questionBox(X,Y), coin(X,Y).
:- coin(X,Y), platformpixel(X,Y).
:- coin(X,Y), cannon(X,Y).
:- coin(X,Y), floor(X,Y).
:- coin(X,Y), enemy(X,Y).
:- coin(X,Y), wallpixel(X,Y).

:- not coinscount{ coin(X,Y) }coinscount.



%%%%%%%%%%%%%
%%% ENEMY %%%
%%%%%%%%%%%%%

#const enemycount=2.
enemycount{ enemy(X,Y) : floor(X,Y-1)}enemycount. 
:- enemy(X,Y), wallpixel(X,Y).
:- enemy(X,Y), coin(X,Y).
enemy(X) :- enemy(X,_).
:- enemy(X), enemy(Z), X<Z, X+7>Z.





% platform1(X) :- platform1(X1,Y,L), X1<=X, X<=X+L, w(X).
%platform1(X,Y) :- platform1(X,Y,L), platform1(X).

#const platform2Length=4.
%platform2Count{ platform2(X1,X2) : block(X,Y), block(X1,X2), X1<X2, pFLength(X2-X1), block(X1,X2) }platform2Count.
%:- platform2(X1,X2), platform1(X), X1<=X2.

#const coinsareacount=3.
caa(1..coinsareacount).
3{ coinsarea(X,Y,ID) : block(X,Y), not floor(X,Y), not coin(X,Y,ID1), ID1!=ID, caa(ID1) } :- caa(ID).
coin(X1,Y1,ID) 	:- coinsarea(X,Y,ID), X1<=X, X<=X1+3, Y1<=Y, Y<=Y1+3, block(X1,Y1).
coin(X1,Y1) :- coin(X1,Y1,ID).
%:- coinsarea(X,Y), cmarked(X,Y).


%{ coinsRect(X,Y,S) : coinsarea(X,Y), S=3 }.
%coins(X,Y) :- coinsRect(XR,YR,S), XR<=X, X<=X+S, YR<=Y, Y<=Y+S. 


%{ enemy(X,Y) : surfaceAll(X,Y)}.

#const focount=5.
{ fallingObject(X,Y) : w(X), Y=1}.
{ fallingObject(X,Y) : platform2pixel(X,Y+1)}.
:- not focount{fallingObject(X,Y)}focount.
fallingObject(X) :- fallingObject(X,Y).
:- fallingObject(X), fallingObject(Z), X<Z, X+5>Z.
%:- fallingObject(X,Y), fallingobject(X,Y1), X




frei(0..5; width-5..width).
item(X) :- firepixel(X,_).
item(X) :- platformpixel(X,_).
item(X) :- questionBox(X,_).
item(X) :- wallpixel(X,_).
item(X) :- coin(X,_).
item(X) :- cannon(X,_).
item(X) :- enemy(X,_).
item(X) :- fallingObject(X,_).



:- frei(X), item(X).

% UMRECHNUNG IN BLOECKE

block(X,Y,9) :- firepixel(X,height-Y), block(X,Y). 
block(X,Y,0) :- platformpixel(X,height-Y), block(X,Y).
block(X,Y,1) :- floor(X,height-Y), block(X,Y). 
block(X,Y,1) :- wallpixel(X,height-Y), block(X,Y).
block(X,Y,14) :- coin(X,height-Y), block(X,Y). 
block(X,Y,4) :- questionBox(X,height-Y), block(X,Y).
block(X,Y,13) :- cannon(X,height-Y).
block(X,Y,15) :- fallingObject(X,Y).
block(X,Y,5) :- enemy(X,height-Y).
%block(1..width-1,height,0).
%block(1..width,height,0).
block(1..width-1,height,0).

blockid(0..30).
%:- not 0{ block(X,Y,ID)}1, blockid(ID).

